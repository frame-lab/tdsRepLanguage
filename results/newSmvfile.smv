MODULE main
VAR
	time: 0..20;
	finalAutomata: finalAutomata(time);
	x : 2..2;
	x_redef1 : 4..30;
	z : boolean;
	w_scope1_0 : 1..1;
	x_redef2 : 80..90;
	y : 0..1;
	w_scope1_1 : 0..1;
ASSIGN
	init(time) := 0;
	next(time) := case
		time < 20: time + 1;
		TRUE: time;
esac;
	init(x):= 2;
	init(x_redef1):= 30;
	init(z):= FALSE;
	init(w_scope1_0):= case 
		!z : 1;
		TRUE : 0; 
	esac;
	next(x_redef1):= case 
		next(time) = 2  : 4;
		TRUE : x_redef1; 
	esac;
	init(x_redef2):= 0;
	next(x_redef2):= case 
		next(time) = 2  : 90;
		next(time) = 3  : 80;
		TRUE : x_redef2; 
	esac;
	init(y):= 0;
	next(y):= case 
		next(time) = 2  : 1;
		TRUE : y; 
	esac;
	next(z):= case 
		next(time) = 3  : FALSE;
		TRUE : z; 
	esac;
	init(w_scope1_1):= 0;
	next(w_scope1_1):= case 
		next(time) = 3  & !z  : 1;
		TRUE : w_scope1_1; 
	esac;

MODULE merger1(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.b = NULL & ports.d = NULL & ports.c != NULL & ports.a = ports.c & FALSE) -> next(cs) = q0) &
	((cs = q0 & ports.a = NULL & ports.d = NULL & ports.c != NULL & ports.b = ports.c & FALSE) -> next(cs) = q0);

MODULE fifo2(time)
VAR
	ports: portsModule;
	cs: {q0,p0,p1};
ASSIGN
	init(cs) := {q0};
TRANS
	((cs = q0 & ports.a = NULL & ports.b = NULL & ports.d = NULL & ports.c = 0 & FALSE) -> next(cs) = p0) &
	((cs = q0 & ports.a = NULL & ports.b = NULL & ports.d = NULL & ports.c = 1 & FALSE) -> next(cs) = p1) &
	((cs = p0 & ports.a = NULL & ports.c = NULL & ports.b = NULL & ports.d = 0) -> next(cs) = q0) &
	((cs = p0) -> ((next(cs) != p1))) &
	((cs = p1 & ports.a = NULL & ports.c = NULL & ports.b = NULL & ports.d = 1) -> next(cs) = q0) &
	((cs = p1) -> ((next(cs) != p0)));

MODULE finalAutomata(time)
VAR
	prod1: merger1(time);
	prod2: fifo2(time);
	ports: portsModule;
	cs: {q0q0,q0p0,q0p1};
ASSIGN
	init(cs) := {q0q0};
TRANS
	((cs = q0q0 & ports.b = NULL & ports.d = NULL & ports.c != NULL & ports.a = ports.c & ports.c = 0) -> next(cs) = q0p0) &
	((cs = q0q0 & ports.b = NULL & ports.d = NULL & ports.c != NULL & ports.a = ports.c & ports.c = 1) -> next(cs) = q0p1) &
	((cs = q0q0 & ports.a = NULL & ports.d = NULL & ports.c != NULL & ports.b = ports.c & ports.c = 0) -> next(cs) = q0p0) &
	((cs = q0q0 & ports.a = NULL & ports.d = NULL & ports.c != NULL & ports.b = ports.c & ports.c = 1) -> next(cs) = q0p1) &
	((cs = q0p0) -> ((next(cs) != q0p1))) &
	((cs = q0p1) -> ((next(cs) != q0p0)));
INVAR
	(((prod1.cs = q0) & (prod2.cs = q0)) <-> (cs = q0q0)) &
	(((prod1.cs = q0) & (prod2.cs = p0)) <-> (cs = q0p0)) &
	(((prod1.cs = q0) & (prod2.cs = p1)) <-> (cs = q0p1));

MODULE portsModule(time)
VAR 
	a : array 0..5 of {NULL, 0, 1};
	c : array 0..5 of {NULL, 0, 1};
	b : array 0..5 of {NULL, 0, 1};
	d : array 0..5 of {NULL, 0, 1};
ASSIGN

